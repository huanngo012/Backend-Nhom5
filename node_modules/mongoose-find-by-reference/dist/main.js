"use strict";
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function _ts_values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
// src/main.ts
var main_exports = {};
__export(main_exports, {
    MongooseFindByReference: function() {
        return MongooseFindByReference;
    }
});
module.exports = __toCommonJS(main_exports);
var import_mongoose = require("mongoose");
var messages = {
    schemaTypeError: {
        "zh-CN": '参数 "schema" 的类型得是 "Schema"。',
        "en-US": 'param "schema" type must be "Schema".'
    },
    modelCountError: {
        "zh-CN": "钩子函数访问到的 Model 数量为 0 或者不存在。",
        "en-US": "The number of models accessed is 0 or does not exist."
    }
};
function i18n(messageId) {
    if (messageId in messages) {
        var message = messages[messageId];
        var _process_env_LANG;
        var lang = ((_process_env_LANG = process.env.LANG) !== null && _process_env_LANG !== void 0 ? _process_env_LANG : "").match("CN");
        if (lang) return message["zh-CN"];
        else return message["en-US"];
    }
}
function MongooseFindByReference(schema) {
    if (schema.constructor.name !== "Schema") throw new Error(i18n("schemaTypeError"));
    schema.pre([
        "find",
        "findOne",
        "distinct"
    ], function() {
        var _ref = _async_to_generator(function(next) {
            var models, schema2, _;
            function getModel(obj) {
                var refKey = "";
                if ((obj === null || obj === void 0 ? void 0 : obj.instance) === "ObjectID" || (obj === null || obj === void 0 ? void 0 : obj.instance) === "ObjectId") {
                    var _options_ref;
                    var options = obj.options;
                    if (options === null || options === void 0 ? void 0 : (_options_ref = options.ref) === null || _options_ref === void 0 ? void 0 : _options_ref.length) {
                        refKey = options.ref;
                    }
                } else if (obj === null || obj === void 0 ? void 0 : obj.$embeddedSchemaType) {
                    return getModel(obj.$embeddedSchemaType);
                }
                return models[refKey];
            }
            function transPath2RefPath(paths) {
                var tSchema = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : schema2;
                var previousPath = [];
                while(paths.length > 0){
                    var _paths_shift;
                    var path = (_paths_shift = paths.shift()) !== null && _paths_shift !== void 0 ? _paths_shift : "";
                    if (tSchema.path(_to_consumable_array(previousPath).concat([
                        path
                    ]).join("."))) {
                        previousPath.push(path);
                    } else {
                        var currentModel = getModel(tSchema.path(previousPath.join(".")));
                        if (currentModel) {
                            var recurseResult = transPath2RefPath([
                                path
                            ].concat(_to_consumable_array(paths)), currentModel.schema);
                            if (!paths.length) {
                                return [
                                    previousPath.join(".")
                                ].concat(_to_consumable_array(recurseResult));
                            } else {
                                var _previousPath;
                                (_previousPath = previousPath).push.apply(_previousPath, _to_consumable_array(recurseResult));
                            }
                        } else return _to_consumable_array(previousPath).concat([
                            path
                        ]);
                    }
                }
                return previousPath;
            }
            function flatten(dd) {
                '\n        { person: { name: "John" } } to { "person.name": "John" }\n      ';
                var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : ".", prefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
                var result = {};
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = Object.entries(dd)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var _step_value = _sliced_to_array(_step.value, 2), k = _step_value[0], v = _step_value[1];
                        var key = prefix ? "".concat(prefix).concat(separator).concat(k) : k;
                        if (v.constructor === Object && !Object.keys(v).some(function(checkKey) {
                            return checkKey.startsWith("$");
                        })) {
                            var flatObject = flatten(v, separator, key);
                            result = _object_spread({}, result, flatObject);
                        } else {
                            result[key] = v;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                            _iterator.return();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return result;
            }
            function lookup(prevPaths, conditions) {
                return _lookup.apply(this, arguments);
            }
            function _lookup() {
                _lookup = _async_to_generator(function(prevPaths, conditions) {
                    var cSchema, result, prevPathsValue, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step, _ret, err;
                    var _arguments = arguments;
                    return _ts_generator(this, function(_state) {
                        switch(_state.label){
                            case 0:
                                cSchema = _arguments.length > 2 && _arguments[2] !== void 0 ? _arguments[2] : schema2;
                                if (typeof conditions !== "object" || conditions === null || Object.keys(conditions).length === 0) {
                                    return [
                                        2,
                                        conditions
                                    ];
                                }
                                result = {};
                                prevPathsValue = cSchema.path(prevPaths.join("."));
                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                                _state.label = 1;
                            case 1:
                                _state.trys.push([
                                    1,
                                    6,
                                    7,
                                    8
                                ]);
                                _loop = function() {
                                    var _step_value, paths, value, reduceResult, ref, ref1, currentPathsArray, currentPathsString, currentPathsValue, currentModel, subConditions, ids, _, _tmp, _tmp1, _1, _tmp2, _tmp3, _2;
                                    return _ts_generator(this, function(_state) {
                                        switch(_state.label){
                                            case 0:
                                                _step_value = _sliced_to_array(_step.value, 2), paths = _step_value[0], value = _step_value[1];
                                                if (schema2.path(paths)) {} else {
                                                    reduceResult = _to_consumable_array(transPath2RefPath(paths.split("."))).concat([
                                                        value
                                                    ]).reduceRight(function(previousValue, currentValue) {
                                                        return currentValue === "$" ? previousValue : _define_property({}, currentValue, previousValue);
                                                    });
                                                    ;
                                                    ref = _sliced_to_array(Object.entries(reduceResult), 1), ref1 = _sliced_to_array(ref[0], 2), paths = ref1[0], value = ref1[1], ref1, ref;
                                                }
                                                currentPathsArray = paths.startsWith("$") ? paths === "$" ? prevPaths : [] : _to_consumable_array(prevPaths).concat([
                                                    paths
                                                ]);
                                                currentPathsString = currentPathsArray.join(".");
                                                currentPathsValue = cSchema.path(currentPathsString);
                                                if (!!paths.startsWith("$")) return [
                                                    3,
                                                    3
                                                ];
                                                if (!(currentPathsValue === void 0)) return [
                                                    3,
                                                    3
                                                ];
                                                currentModel = getModel(prevPathsValue);
                                                if (!currentModel) return [
                                                    3,
                                                    3
                                                ];
                                                return [
                                                    4,
                                                    lookup([], value, currentModel.schema)
                                                ];
                                            case 1:
                                                subConditions = _state.sent();
                                                if (!subConditions) return [
                                                    3,
                                                    3
                                                ];
                                                return [
                                                    4,
                                                    currentModel.find(flatten(_define_property({}, paths, subConditions)), "_id")
                                                ];
                                            case 2:
                                                ids = _state.sent().map(function(v) {
                                                    return v._id;
                                                });
                                                return [
                                                    2,
                                                    {
                                                        v: {
                                                            $in: ids
                                                        }
                                                    }
                                                ];
                                            case 3:
                                                if (!Array.isArray(value)) return [
                                                    3,
                                                    5
                                                ];
                                                _ = Object.assign;
                                                _tmp = [
                                                    result
                                                ];
                                                _tmp1 = [
                                                    {},
                                                    paths
                                                ];
                                                return [
                                                    4,
                                                    Promise.all(value.map(function() {
                                                        var _ref = _async_to_generator(function(v) {
                                                            return _ts_generator(this, function(_state) {
                                                                switch(_state.label){
                                                                    case 0:
                                                                        return [
                                                                            4,
                                                                            lookup(currentPathsArray, v, cSchema)
                                                                        ];
                                                                    case 1:
                                                                        return [
                                                                            2,
                                                                            _state.sent()
                                                                        ];
                                                                }
                                                            });
                                                        });
                                                        return function(v) {
                                                            return _ref.apply(this, arguments);
                                                        };
                                                    }()))
                                                ];
                                            case 4:
                                                _.apply(Object, _tmp.concat([
                                                    _define_property.apply(void 0, _tmp1.concat([
                                                        _state.sent()
                                                    ]))
                                                ]));
                                                return [
                                                    3,
                                                    8
                                                ];
                                            case 5:
                                                if (!(typeof value === "object" && value !== null && Object.keys(value).length > 0 && !(0, import_mongoose.isValidObjectId)(value))) return [
                                                    3,
                                                    7
                                                ];
                                                _1 = Object.assign;
                                                _tmp2 = [
                                                    result
                                                ];
                                                _tmp3 = [
                                                    {},
                                                    paths
                                                ];
                                                _2 = Object.fromEntries;
                                                return [
                                                    4,
                                                    Promise.all(Object.entries(value).map(function() {
                                                        var _ref = _async_to_generator(function(param) {
                                                            var _param, k, v, _;
                                                            return _ts_generator(this, function(_state) {
                                                                switch(_state.label){
                                                                    case 0:
                                                                        _param = _sliced_to_array(param, 2), k = _param[0], v = _param[1];
                                                                        _ = Object.entries;
                                                                        return [
                                                                            4,
                                                                            lookup(currentPathsArray, _define_property({}, k, v), cSchema)
                                                                        ];
                                                                    case 1:
                                                                        return [
                                                                            2,
                                                                            _.apply(Object, [
                                                                                _state.sent()
                                                                            ])[0]
                                                                        ];
                                                                }
                                                            });
                                                        });
                                                        return function(_) {
                                                            return _ref.apply(this, arguments);
                                                        };
                                                    }()))
                                                ];
                                            case 6:
                                                _1.apply(Object, _tmp2.concat([
                                                    _define_property.apply(void 0, _tmp3.concat([
                                                        _2.apply(Object, [
                                                            _state.sent()
                                                        ])
                                                    ]))
                                                ]));
                                                return [
                                                    3,
                                                    8
                                                ];
                                            case 7:
                                                result[paths] = value;
                                                _state.label = 8;
                                            case 8:
                                                return [
                                                    2
                                                ];
                                        }
                                    });
                                };
                                _iterator = Object.entries(conditions)[Symbol.iterator]();
                                _state.label = 2;
                            case 2:
                                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                                    3,
                                    5
                                ];
                                return [
                                    5,
                                    _ts_values(_loop())
                                ];
                            case 3:
                                _ret = _state.sent();
                                if (_type_of(_ret) === "object") return [
                                    2,
                                    _ret.v
                                ];
                                _state.label = 4;
                            case 4:
                                _iteratorNormalCompletion = true;
                                return [
                                    3,
                                    2
                                ];
                            case 5:
                                return [
                                    3,
                                    8
                                ];
                            case 6:
                                err = _state.sent();
                                _didIteratorError = true;
                                _iteratorError = err;
                                return [
                                    3,
                                    8
                                ];
                            case 7:
                                try {
                                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                                        _iterator.return();
                                    }
                                } finally{
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                                return [
                                    7
                                ];
                            case 8:
                                return [
                                    2,
                                    result
                                ];
                        }
                    });
                });
                return _lookup.apply(this, arguments);
            }
            return _ts_generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        models = this.model.db.models;
                        if (Object.keys(models !== null && models !== void 0 ? models : {}).length === 0) throw new Error(i18n("modelCountError"));
                        schema2 = this.model.schema;
                        "\n    Example:\n    {\n        $and:{\n            'owner.name':'Dean',\n            'infos.timestamp.createdAt':Date,\n        },\n        $or:[]\n    }";
                        _ = this;
                        return [
                            4,
                            lookup([], this._conditions)
                        ];
                    case 1:
                        _._conditions = _state.sent();
                        next();
                        return [
                            2
                        ];
                }
            });
        });
        return function(next) {
            return _ref.apply(this, arguments);
        };
    }());
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
    MongooseFindByReference: MongooseFindByReference
});
